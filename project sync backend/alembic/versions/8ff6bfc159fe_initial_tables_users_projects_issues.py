"""Initial tables: users, projects, issues

Revision ID: 8ff6bfc159fe
Revises: 30870510a240
Create Date: 2025-05-27 11:44:05.060096

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel
# revision identifiers, used by Alembic.
revision: str = '8ff6bfc159fe'
down_revision: Union[str, None] = '30870510a240'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Drop dependent tables first (reverse dependency order)
    with op.batch_alter_table('issue', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_issue_id'))
    op.drop_table('issue')

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_project_id'))
    op.drop_table('project')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))
        batch_op.drop_index(batch_op.f('ix_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_username'))
    op.drop_table('user')

    # Now create new schema (in dependency order)
    op.create_table('users',
        sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
        sa.Column('role', sa.Enum('PM', 'DEVELOPER', 'DESIGNER', name='userrole'), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('projects',
        sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('pm_id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['pm_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('issues',
        sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issuepriority'), nullable=False),
        sa.Column('issue_type', sa.Enum('BUG', 'TASK', 'FEATURE', 'ENHANCEMENT', name='issuetype'), nullable=False),
        sa.Column('id', sa.Uuid(), nullable=False),
        sa.Column('status', sa.Enum('OPEN', 'ASSIGNED', 'IN_PROGRESS', 'REVIEW', 'COMPLETED', name='issuestatus'), nullable=False),
        sa.Column('project_id', sa.Uuid(), nullable=False),
        sa.Column('assigned_to_id', sa.Uuid(), nullable=True),
        sa.Column('created_by_id', sa.Uuid(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.PrimaryKeyConstraint('id')
    )


# def upgrade() -> None:
#     """Upgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.create_table('users',
#     sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
#     sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
#     sa.Column('role', sa.Enum('PM', 'DEVELOPER', 'DESIGNER', name='userrole'), nullable=False),
#     sa.Column('is_active', sa.Boolean(), nullable=False),
#     sa.Column('id', sa.Uuid(), nullable=False),
#     sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
#     sa.Column('created_at', sa.DateTime(), nullable=True),
#     sa.Column('updated_at', sa.DateTime(), nullable=True),
#     sa.PrimaryKeyConstraint('id')
#     )
#     with op.batch_alter_table('users', schema=None) as batch_op:
#         batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
#         batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

#     op.create_table('projects',
#     sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
#     sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
#     sa.Column('is_active', sa.Boolean(), nullable=False),
#     sa.Column('id', sa.Uuid(), nullable=False),
#     sa.Column('pm_id', sa.Uuid(), nullable=False),
#     sa.Column('created_at', sa.DateTime(), nullable=True),
#     sa.Column('updated_at', sa.DateTime(), nullable=True),
#     sa.ForeignKeyConstraint(['pm_id'], ['users.id'], ),
#     sa.PrimaryKeyConstraint('id')
#     )
#     op.create_table('issues',
#     sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
#     sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
#     sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='issuepriority'), nullable=False),
#     sa.Column('issue_type', sa.Enum('BUG', 'TASK', 'FEATURE', 'ENHANCEMENT', name='issuetype'), nullable=False),
#     sa.Column('id', sa.Uuid(), nullable=False),
#     sa.Column('status', sa.Enum('OPEN', 'ASSIGNED', 'IN_PROGRESS', 'REVIEW', 'COMPLETED', name='issuestatus'), nullable=False),
#     sa.Column('project_id', sa.Uuid(), nullable=False),
#     sa.Column('assigned_to_id', sa.Uuid(), nullable=True),
#     sa.Column('created_by_id', sa.Uuid(), nullable=False),
#     sa.Column('created_at', sa.DateTime(), nullable=True),
#     sa.Column('updated_at', sa.DateTime(), nullable=True),
#     sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ),
#     sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
#     sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
#     sa.PrimaryKeyConstraint('id')
#     )
#     with op.batch_alter_table('user', schema=None) as batch_op:
#         batch_op.drop_index(batch_op.f('ix_user_email'))
#         batch_op.drop_index(batch_op.f('ix_user_id'))
#         batch_op.drop_index(batch_op.f('ix_user_username'))

#     op.drop_table('user')
#     with op.batch_alter_table('issue', schema=None) as batch_op:
#         batch_op.drop_index(batch_op.f('ix_issue_id'))

#     op.drop_table('issue')
#     with op.batch_alter_table('project', schema=None) as batch_op:
#         batch_op.drop_index(batch_op.f('ix_project_id'))

#     op.drop_table('project')
#     # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('project',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('pm_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['pm_id'], ['user.id'], name='project_pm_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='project_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_project_id'), ['id'], unique=False)

    op.create_table('issue',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('assigned_to_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint("priority::text = ANY (ARRAY['Low'::character varying, 'Medium'::character varying, 'High'::character varying, 'Critical'::character varying]::text[])", name=op.f('check_priority')),
    sa.CheckConstraint("status::text = ANY (ARRAY['Assigned'::character varying, 'In Progress'::character varying, 'Review'::character varying, 'Completed'::character varying]::text[])", name=op.f('check_status')),
    sa.CheckConstraint("type::text = ANY (ARRAY['Bug'::character varying, 'Task'::character varying, 'Feature'::character varying]::text[])", name=op.f('check_type')),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['user.id'], name=op.f('issue_assigned_to_id_fkey')),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], name=op.f('issue_created_by_id_fkey')),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name=op.f('issue_project_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('issue_pkey'))
    )
    with op.batch_alter_table('issue', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_issue_id'), ['id'], unique=False)

    op.create_table('user',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.CheckConstraint("role::text = ANY (ARRAY['PM'::character varying, 'Developer'::character varying, 'Designer'::character varying]::text[])", name=op.f('check_role')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_pkey'))
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_username'), ['username'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    op.drop_table('issues')
    op.drop_table('projects')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###


